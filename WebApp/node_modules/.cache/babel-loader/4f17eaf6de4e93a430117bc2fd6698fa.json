{"ast":null,"code":"import _slicedToArray from \"/home/asitha/Documents/Mobile Apps/elly/WebApp/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/asitha/Documents/Mobile Apps/elly/WebApp/src/components/ObservationDialog/ObservationDialog.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Avatar from '@material-ui/core/Avatar';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport InfoRounded from '@material-ui/icons/InfoRounded';\nimport Swal from 'sweetalert2';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport firebase from 'firebase/app';\nexport default function ObservationDialog(props) {\n  // const { onClose, selectedValue, open } = props;\n  // const handleClose = () => {\n  //   onClose(selectedValue);\n  // };\n  // const handleListItemClick = value => {\n  //   onClose(value);\n  // };\n  const verifyHandler = (id, userId) => {\n    handleClose();\n    Swal.fire({\n      title: 'Are you sure?',\n      text: \"You can delete accidentaly verified stuff from the approved page!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Yes, verify it!'\n    }).then(result => {\n      if (result.value) {\n        firebase.database().ref().child('users').child(userId).child('observations').child(id).child('verified').set(true);\n        Swal.fire('Verified!', 'Your file has been verified.', 'success');\n      }\n    });\n  };\n\n  const deleteHandler = (id, userId) => {\n    handleClose();\n    Swal.fire({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Yes, delete it!'\n    }).then(result => {\n      if (result.value) {\n        firebase.database().ref().child('users').child(userId).child('observations').child(id).remove();\n        Swal.fire('Deleted!', 'Your file has been deleted.', 'success');\n      }\n    });\n  };\n\n  const classes = useStyles(); // getModalStyle is not a pure function, we roll the style only on the first render\n\n  const _React$useState = React.useState(getModalStyle),\n        _React$useState2 = _slicedToArray(_React$useState, 1),\n        modalStyle = _React$useState2[0];\n\n  const _React$useState3 = React.useState(false),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        open = _React$useState4[0],\n        setOpen = _React$useState4[1];\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  function rand() {\n    return Math.round(Math.random() * 20) - 10;\n  }\n\n  function getModalStyle() {\n    const top = 50 + rand();\n    const left = 50 + rand();\n    return {\n      top: \"\".concat(top, \"%\"),\n      left: \"\".concat(left, \"%\"),\n      transform: \"translate(-\".concat(top, \"%, -\").concat(left, \"%)\")\n    };\n  }\n\n  const useStyles = makeStyles(theme => ({\n    paper: {\n      position: 'absolute',\n      width: 400,\n      backgroundColor: theme.palette.background.paper,\n      border: '2px solid #000',\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(2, 4, 3)\n    }\n  }));\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    onClick: handleOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, \"Open Modal\"), React.createElement(Modal, {\n    \"aria-labelledby\": \"simple-modal-title\",\n    \"aria-describedby\": \"simple-modal-description\",\n    open: open,\n    onClose: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: modalStyle,\n    className: classes.paper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    id: \"simple-modal-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, \"Text in a modal\"), React.createElement(\"p\", {\n    id: \"simple-modal-description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, \"Duis mollis, est non commodo luctus, nisi erat porttitor ligula.\"), React.createElement(SimpleModal, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  })))) // <Dialog onClose={handleClose} aria-labelledby=\"simple-dialog-title\" open={open}>\n  //   <img alt={'scorelab.org'} style={{width: 1200,height: 600}} src={props.img}/> \n  //     <List>\n  //         {props.result.map(item => (\n  //         <ListItem button onClick={() => handleListItemClick(item[1])} key={item[1]}>\n  //             <ListItemAvatar>\n  //               <Avatar>\n  //                 <InfoRounded/>\n  //               </Avatar>\n  //             </ListItemAvatar>\n  //             <ListItemText primary={item[1]} />\n  //         </ListItem>\n  //         ))}\n  //     </List>\n  //     <DialogTitle id=\"simple-dialog-title\">\n  //       {props.verified?\n  //         <Button style={{margin: 2}} variant=\"outlined\" onClick={()=>deleteHandler(props.id, props.userId)} color=\"secondary\">Delete</Button>\n  //       :\n  //         <div>\n  //           <Button style={{margin: 2}} variant=\"outlined\" onClick={()=>verifyHandler(props.id, props.userId)} color=\"primary\">Verify</Button>\n  //           <Button style={{margin: 2}} variant=\"outlined\" onClick={()=>deleteHandler(props.id, props.userId)} color=\"secondary\">Delete</Button>\n  //         </div>\n  //       }\n  //     </DialogTitle>\n  // </Dialog>\n  ;\n}\nObservationDialog.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  selectedValue: PropTypes.string.isRequired\n};","map":{"version":3,"sources":["/home/asitha/Documents/Mobile Apps/elly/WebApp/src/components/ObservationDialog/ObservationDialog.js"],"names":["React","PropTypes","Button","Avatar","List","ListItem","ListItemAvatar","ListItemText","DialogTitle","Dialog","InfoRounded","Swal","makeStyles","Modal","firebase","ObservationDialog","props","verifyHandler","id","userId","handleClose","fire","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","value","database","ref","child","set","deleteHandler","remove","classes","useStyles","useState","getModalStyle","modalStyle","open","setOpen","handleOpen","rand","Math","round","random","top","left","transform","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","propTypes","onClose","func","isRequired","bool","selectedValue","string"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Avatar from '@material-ui/core/Avatar';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport InfoRounded from '@material-ui/icons/InfoRounded';\nimport Swal from 'sweetalert2'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport firebase from 'firebase/app'\n\nexport default function ObservationDialog(props) {\n  // const { onClose, selectedValue, open } = props;\n\n  // const handleClose = () => {\n  //   onClose(selectedValue);\n  // };\n\n  // const handleListItemClick = value => {\n  //   onClose(value);\n  // };\n\n  const verifyHandler = (id, userId) => {\n    handleClose()\n    Swal.fire({\n      title: 'Are you sure?',\n      text: \"You can delete accidentaly verified stuff from the approved page!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Yes, verify it!'\n    }).then((result) => {\n      if (result.value) {\n        firebase.database().ref().child('users').child(userId).child('observations').child(id).child('verified').set(true)\n        Swal.fire(\n          'Verified!',\n          'Your file has been verified.',\n          'success'\n        )\n      }\n    })\n  }\n\n  const deleteHandler = (id, userId) => {\n    handleClose()\n    Swal.fire({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Yes, delete it!'\n    }).then((result) => {\n      if (result.value) {\n        firebase.database().ref().child('users').child(userId).child('observations').child(id).remove()\n        Swal.fire(\n          'Deleted!',\n          'Your file has been deleted.',\n          'success'\n        )\n      }\n    })\n  }\n  const classes = useStyles();\n  // getModalStyle is not a pure function, we roll the style only on the first render\n  const [modalStyle] = React.useState(getModalStyle);\n  const [open, setOpen] = React.useState(false);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n  function rand() {\n    return Math.round(Math.random() * 20) - 10;\n  }\n  \n  function getModalStyle() {\n    const top = 50 + rand();\n    const left = 50 + rand();\n  \n    return {\n      top: `${top}%`,\n      left: `${left}%`,\n      transform: `translate(-${top}%, -${left}%)`,\n    };\n  }\n  const useStyles = makeStyles(theme => ({\n    paper: {\n      position: 'absolute',\n      width: 400,\n      backgroundColor: theme.palette.background.paper,\n      border: '2px solid #000',\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(2, 4, 3),\n    },\n  }));\n\n  return (\n    <div>\n      <button type=\"button\" onClick={handleOpen}>\n        Open Modal\n      </button>\n      <Modal\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n        open={open}\n        onClose={handleClose}\n      >\n        <div style={modalStyle} className={classes.paper}>\n          <h2 id=\"simple-modal-title\">Text in a modal</h2>\n          <p id=\"simple-modal-description\">\n            Duis mollis, est non commodo luctus, nisi erat porttitor ligula.\n          </p>\n          <SimpleModal />\n        </div>\n      </Modal>\n    </div>\n    // <Dialog onClose={handleClose} aria-labelledby=\"simple-dialog-title\" open={open}>\n    //   <img alt={'scorelab.org'} style={{width: 1200,height: 600}} src={props.img}/> \n    //     <List>\n    //         {props.result.map(item => (\n    //         <ListItem button onClick={() => handleListItemClick(item[1])} key={item[1]}>\n    //             <ListItemAvatar>\n    //               <Avatar>\n    //                 <InfoRounded/>\n    //               </Avatar>\n    //             </ListItemAvatar>\n    //             <ListItemText primary={item[1]} />\n    //         </ListItem>\n    //         ))}\n    //     </List>\n    //     <DialogTitle id=\"simple-dialog-title\">\n    //       {props.verified?\n    //         <Button style={{margin: 2}} variant=\"outlined\" onClick={()=>deleteHandler(props.id, props.userId)} color=\"secondary\">Delete</Button>\n    //       :\n    //         <div>\n    //           <Button style={{margin: 2}} variant=\"outlined\" onClick={()=>verifyHandler(props.id, props.userId)} color=\"primary\">Verify</Button>\n    //           <Button style={{margin: 2}} variant=\"outlined\" onClick={()=>deleteHandler(props.id, props.userId)} color=\"secondary\">Delete</Button>\n    //         </div>\n    //       }\n          \n          \n    //     </DialogTitle>\n    // </Dialog>\n  );\n}\n\nObservationDialog.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  selectedValue: PropTypes.string.isRequired,\n};"]},"metadata":{},"sourceType":"module"}